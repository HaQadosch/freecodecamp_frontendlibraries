{"version":3,"sources":["Store/Slices/statusSlice.ts","Store/Slices/totalSlice.ts","Store/Slices/historySlice.ts","Store/Slices/tempTotalSlice.ts","Store/rootReducer.ts","Utils/ops.ts","Buttons/Equals.tsx","Buttons/Digits.tsx","Buttons/Ops.tsx","Buttons/Decimal.tsx","Buttons/Clear.tsx","Display/Display.tsx","serviceWorker.ts","Store/store.ts","index.tsx","App.tsx"],"names":["Status","initialState","value","setTotalReducer","setTotal","state","action","produce","_","payload","appendTotalReducer","appendTotal","draft","clearReducer","clear","totalSlice","createSlice","name","reducers","pushHistoryReducer","pushHistory","push","length","splice","replaceHistoryReducer","replaceHistory","operator","historySlice","tempValue","setTempReducer","setTemp","tempValueSlice","FirstInput","setStateReducer","setState","statusSlice","totalReducer","reducer","actions","historyReducer","clearHistory","tempValueReducer","clearTemp","statusReducer","rootReducer","combineReducers","total","history","temp","status","operate","a","b","Equals","dispatch","useDispatch","useSelector","lastValue","tempTotal","id","onClick","OperatorInput","TotalInput","FollowUpInput","prevValue","Number","parseFloat","toString","digits","Digit","Digits","map","key","handleClick","MaybeNegative","OperatorButton","concat","reduce","accHistory","curHistory","tempSign","className","OpAdd","OpSubtract","OpMultiply","OpDivide","Decimal","test","Clear","Display","index","Fragment","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","store","configureStore","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2c100c4c.chunk.js","sourcesContent":["import { produce, Draft } from \"immer\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n/**\r\n * \r\n * 3 possible states: \r\n *  - FirstInput, no matter what the display is, delete and replace with the new input\r\n *  - FollowUpInput, after the FirstInput, add the numbers and build the value\r\n *  - TotalInput, after the =, display the result of the operation, this is an end State.\r\n */\r\n\r\n\r\nexport enum Status {\r\n  FirstInput = 'FirstInput',\r\n  FollowUpInput = 'FollowUpInput',\r\n  OperatorInput = 'OperatorInput',\r\n  TotalInput = 'TotalInput',\r\n  MaybeNegative = 'MaybeNegative'\r\n}\r\n\r\ninterface ICalcState {\r\n  readonly state: Status\r\n}\r\n\r\nexport interface ISetCalcPayload {\r\n  state: Status\r\n}\r\n\r\nconst initialState: ICalcState = {\r\n  state: Status.FirstInput\r\n}\r\n\r\nconst setStateReducer = {\r\n  setState: (state: ICalcState, action: PayloadAction<ISetCalcPayload>) => produce(state, (_: Draft<ICalcState>) => action.payload)\r\n}\r\n\r\nconst clearReducer = {\r\n  clear: (state: ICalcState) => produce(state, (_: Draft<ICalcState>) => initialState)\r\n}\r\n\r\nexport const statusSlice = createSlice({\r\n  name: 'status',\r\n  initialState,\r\n  reducers: {\r\n    ...setStateReducer,\r\n    ...clearReducer\r\n  }\r\n})","import { produce, Draft } from \"immer\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\ninterface ITotalState {\r\n  readonly value: string\r\n}\r\n\r\nexport interface ISetTotalPayload {\r\n  value: string\r\n}\r\n\r\nconst initialState: ITotalState = {\r\n  value: '0'\r\n}\r\n\r\nconst setTotalReducer = {\r\n  setTotal: (state: ITotalState, action: PayloadAction<ISetTotalPayload>) => produce(state, (_: Draft<ITotalState>) => action.payload)\r\n}\r\n\r\nconst appendTotalReducer = {\r\n  appendTotal: (state: ITotalState, action: PayloadAction<ISetTotalPayload>) => produce(state, (draft: Draft<ITotalState>) => {\r\n    draft.value = `${ draft.value !== \"0\" ? draft.value : '' }${ action.payload.value }`\r\n  })\r\n}\r\n\r\nconst clearReducer = {\r\n  clear: (state: ITotalState) => produce(state, (_: Draft<ITotalState>) => initialState)\r\n}\r\n\r\nexport const totalSlice = createSlice({\r\n  name: 'total',\r\n  initialState,\r\n  reducers: {\r\n    ...setTotalReducer,\r\n    ...appendTotalReducer,\r\n    ...clearReducer\r\n  }\r\n})","import { produce, Draft } from \"immer\"\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\n\r\ntype IHistoryState = {\r\n  readonly prevValue: string\r\n  readonly operator: string\r\n}[]\r\n\r\nconst initialState: IHistoryState = []\r\n\r\nconst clearReducer = {\r\n  clear: (state: IHistoryState) => produce(state, (_: Draft<IHistoryState>) => initialState)\r\n}\r\n\r\nexport interface IHistoryOpsPayload {\r\n  prevValue: string\r\n  operator: string\r\n}\r\n\r\nexport interface IHistoryReplacePayload {\r\n  operator: string\r\n}\r\n\r\n/**\r\n * { type: 'history/pushHistory', payload: { prevalue, operation } }\r\n * \r\n * We only keep the last 5 operations.\r\n * The List is being displayed from top to bottom, so the operations are stored in reverse.\r\n */\r\nconst pushHistoryReducer = {\r\n  pushHistory: (state: IHistoryState, action: PayloadAction<IHistoryOpsPayload>) => produce(state, (draft: Draft<IHistoryState>) => {\r\n    draft.push(action.payload)\r\n    if (draft.length === 6) draft.splice(0, 1)\r\n  })\r\n}\r\n\r\nconst replaceHistoryReducer = {\r\n  replaceHistory: (state: IHistoryState, action: PayloadAction<IHistoryReplacePayload>) => produce(state, (draft: Draft<IHistoryState>) => {\r\n    draft[draft.length - 1].operator = action.payload.operator\r\n  })\r\n}\r\n\r\nexport const historySlice = createSlice({\r\n  name: 'history',\r\n  initialState,\r\n  reducers: {\r\n    ...clearReducer,\r\n    ...pushHistoryReducer,\r\n    ...replaceHistoryReducer\r\n  }\r\n})","import { produce, Draft } from \"immer\"\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\n\r\ntype ITempState = {\r\n  readonly tempValue: string\r\n  readonly tempSign?: string // Force the display of negative sign.\r\n}\r\n\r\nconst initialState: ITempState = { tempValue: '0' }\r\n\r\nconst clearReducer = {\r\n  clear: (state: ITempState) => produce(state, (_: Draft<ITempState>) => initialState)\r\n}\r\n\r\nexport interface ISetTempPayload {\r\n  tempValue: string\r\n  tempSign?: string\r\n}\r\n\r\nconst setTempReducer = {\r\n  setTemp: (state: ITempState, action: PayloadAction<ISetTempPayload>) => produce(state, (_: Draft<ITempState>) => action.payload)\r\n}\r\n\r\nexport const tempValueSlice = createSlice({\r\n  name: 'tempTotal',\r\n  initialState,\r\n  reducers: {\r\n    ...clearReducer,\r\n    ...setTempReducer\r\n  }\r\n})","import { combineReducers } from \"@reduxjs/toolkit\";\r\nimport { totalSlice } from \"./Slices/totalSlice\";\r\nimport { historySlice } from \"./Slices/historySlice\";\r\nimport { tempValueSlice } from \"./Slices/tempTotalSlice\";\r\nimport { statusSlice } from \"./Slices/statusSlice\";\r\n\r\nconst { reducer: totalReducer, actions: { setTotal, clear, appendTotal } } = totalSlice\r\nconst { reducer: historyReducer, actions: { pushHistory, clear: clearHistory, replaceHistory } } = historySlice\r\nconst { reducer: tempValueReducer, actions: { setTemp, clear: clearTemp } } = tempValueSlice\r\nconst { reducer: statusReducer, actions: { setState, clear: clearStatus } } = statusSlice\r\n\r\nexport const rootReducer = combineReducers({\r\n  total: totalReducer,\r\n  history: historyReducer,\r\n  temp: tempValueReducer,\r\n  status: statusReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\nexport {\r\n  setTotal, clear, appendTotal,\r\n  pushHistory, clearHistory, replaceHistory,\r\n  setTemp, clearTemp,\r\n  setState, clearStatus\r\n}","export function operate (operator: string) {\r\n  switch (operator) {\r\n    case '+':\r\n      return (a: number, b: number): number => a + b\r\n    case '-':\r\n      return (a: number, b: number): number => a - b\r\n    case '*':\r\n      return (a: number, b: number): number => a * b\r\n    case '/':\r\n      return (a: number, b: number): number => a / b\r\n    default:\r\n      return (a: number): number => a\r\n  }\r\n}","import React from 'react'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  RootState,\r\n  pushHistory, replaceHistory,\r\n  setTotal,\r\n  setTemp,\r\n  setState\r\n} from \"../Store/rootReducer\"\r\nimport { AppDispatch } from \"../Store/store\"\r\nimport { Status } from \"../Store/Slices/statusSlice\";\r\nimport { operate } from \"../Utils/ops\";\r\n\r\nexport const Equals: React.FC = () => {\r\n  const dispatch: AppDispatch = useDispatch()\r\n  const history = useSelector(({ history }: RootState) => history)\r\n  const { value: lastValue } = useSelector(({ total }: RootState) => total)\r\n  const { tempValue: tempTotal } = useSelector(({ temp }: RootState) => temp)\r\n  const { state: status } = useSelector(({ status }: RootState) => status)\r\n\r\n\r\n  return (\r\n    <button id=\"equals\" onClick={ handleClick }>\r\n      =\r\n    </button>\r\n  )\r\n\r\n  function handleClick (_: React.MouseEvent<HTMLButtonElement>): void {\r\n    switch (status) {\r\n      case Status.OperatorInput: // Result has already been computed as temp in the last ops dispatch.\r\n        dispatch(replaceHistory({\r\n          operator: '='\r\n        }))\r\n        dispatch(setTotal({ value: tempTotal }))\r\n        dispatch(setState({ state: Status.TotalInput }))\r\n        break\r\n      case Status.FollowUpInput:\r\n        dispatch(pushHistory({\r\n          prevValue: lastValue,\r\n          operator: '='\r\n        }))\r\n        {\r\n          const lastOperator = history[history.length - 1]?.operator\r\n          const total = operate(lastOperator)(Number.parseFloat(tempTotal), Number.parseFloat(lastValue)).toString(10)\r\n          dispatch(setTemp({ tempValue: total }))\r\n          dispatch(setTotal({ value: total }))\r\n        }\r\n        dispatch(setState({ state: Status.TotalInput }))\r\n        break\r\n      case Status.FirstInput:\r\n      case Status.TotalInput:\r\n      default:\r\n      // Do nothing. \r\n    }\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  RootState,\r\n  appendTotal, setTotal,\r\n  setState,\r\n  clearHistory,\r\n  clearTemp\r\n} from \"../Store/rootReducer\"\r\nimport { AppDispatch } from \"../Store/store\"\r\nimport { Status } from \"../Store/Slices/statusSlice\"\r\n\r\ninterface IDigit {\r\n  id: string\r\n  value: string\r\n  onClick: (value: string) => void\r\n}\r\n\r\nconst digits: Pick<IDigit, 'id' | 'value'>[] = [\r\n  { id: 'zero', value: '0' },\r\n  { id: 'one', value: '1' },\r\n  { id: 'two', value: '2' },\r\n  { id: 'three', value: '3' },\r\n  { id: 'four', value: '4' },\r\n  { id: 'five', value: '5' },\r\n  { id: 'six', value: '6' },\r\n  { id: 'seven', value: '7' },\r\n  { id: 'eight', value: '8' },\r\n  { id: 'nine', value: '9' },\r\n]\r\n\r\nconst Digit: React.FC<IDigit> = ({ value, id, onClick }) => {\r\n  return (\r\n    <button id={ id } onClick={ (_: React.MouseEvent<HTMLButtonElement>) => onClick(value) }>\r\n      { value }\r\n    </button>\r\n  )\r\n}\r\n\r\nexport const Digits: React.FC = () => {\r\n  const dispatch: AppDispatch = useDispatch()\r\n  const { state: status } = useSelector(({ status }: RootState) => status)\r\n\r\n  return (\r\n    <>\r\n      { digits.map(({ value, id }) => <Digit value={ value } id={ id } key={ id } onClick={ handleClick } />) }\r\n    </>\r\n  )\r\n\r\n  function handleClick (value: string): void {\r\n    switch (status) {\r\n      case Status.FirstInput:\r\n      case Status.TotalInput:\r\n        dispatch(clearHistory())\r\n        dispatch(clearTemp())\r\n        dispatch(setTotal({ value }))\r\n        dispatch(setState({ state: Status.FollowUpInput }))\r\n        break\r\n      case Status.FollowUpInput:\r\n        dispatch(appendTotal({ value }))\r\n        break\r\n      case Status.OperatorInput:\r\n        dispatch(appendTotal({ value }))\r\n        dispatch(setState({ state: Status.FollowUpInput }))\r\n        break\r\n      case Status.MaybeNegative:\r\n        dispatch(setTotal({ value: `-${ value }` }))\r\n        dispatch(setState({ state: Status.FollowUpInput }))\r\n        break\r\n      default:\r\n      // Do nothing. \r\n    }\r\n  }\r\n}","import React from 'react'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  RootState,\r\n  pushHistory, replaceHistory, clearHistory,\r\n  setTotal,\r\n  setTemp,\r\n  setState\r\n} from \"../Store/rootReducer\"\r\nimport { AppDispatch } from \"../Store/store\"\r\nimport { Status } from \"../Store/Slices/statusSlice\";\r\nimport { operate } from \"../Utils/ops\";\r\n\r\ninterface IOperatorButton {\r\n  operator: string\r\n  id: string\r\n}\r\n\r\nconst OperatorButton: React.FC<IOperatorButton> = ({ id, operator }) => {\r\n  const dispatch: AppDispatch = useDispatch()\r\n  const history = useSelector(({ history }: RootState) => history)\r\n  const { value: total } = useSelector(({ total }: RootState) => total)\r\n  const { state: status } = useSelector(({ status }: RootState) => status)\r\n  const { tempValue } = useSelector(({ temp }: RootState) => temp)\r\n\r\n  return (\r\n    <button id={ id } onClick={ handleClick } className={ id === 'subtract' && status === Status.MaybeNegative ? 'negative' : '' }>\r\n      { operator }\r\n    </button>\r\n  )\r\n\r\n  function handleClick (_: React.MouseEvent<HTMLButtonElement>): void {\r\n    switch (status) {\r\n      case Status.FollowUpInput: // After entering a valid number.\r\n        dispatch(pushHistory({\r\n          prevValue: total,\r\n          operator\r\n        }))\r\n        const temp = history.concat([{ prevValue: total, operator }]).reduce((accHistory, curHistory) => {\r\n          return { prevValue: operate(accHistory.operator)(Number.parseFloat(accHistory.prevValue), Number.parseFloat(curHistory.prevValue)).toString(10), operator: curHistory.operator }\r\n        })\r\n        dispatch(setTemp({ tempValue: temp.prevValue }))\r\n        dispatch(setTotal({ value: '0' }))\r\n        dispatch(setState({ state: Status.OperatorInput }))\r\n        break\r\n      case Status.OperatorInput: // After pressing a operator.\r\n        // Second time pushing for operator, this is to replace the previous one.\r\n        // Unless you input a - which might indicate that the second number is negative.\r\n        if (operator === '-') {\r\n          dispatch(setState({ state: Status.MaybeNegative }))\r\n          dispatch(setTemp({\r\n            tempSign: '',\r\n            tempValue\r\n          }))\r\n        } else {\r\n          dispatch(replaceHistory({\r\n            operator\r\n          }))\r\n        }\r\n        break\r\n      case Status.MaybeNegative: // Just after pressing the - button.\r\n        // That was just a mistake, overwrite with the last operator.\r\n        dispatch(setState({ state: Status.OperatorInput }))\r\n        dispatch(replaceHistory({\r\n          operator\r\n        }))\r\n        break\r\n      case Status.TotalInput: // Just after the end of the previous evaluation.\r\n        // Using the result of the previous calculation.\r\n        dispatch(clearHistory())\r\n        dispatch(pushHistory({\r\n          prevValue: total,\r\n          operator\r\n        }))\r\n        dispatch(setTotal({ value: '0' }))\r\n        dispatch(setState({ state: Status.OperatorInput }))\r\n        break\r\n      case Status.FirstInput: // When this is the first button you press.\r\n        // The `-` ops in considered minus sign.\r\n        if (operator === '-') {\r\n          dispatch(setState({ state: Status.MaybeNegative }))\r\n          dispatch(setTemp({\r\n            tempValue: '0',\r\n            tempSign: '-'\r\n          }))\r\n        }\r\n        break\r\n      default:\r\n      // Do nothing. \r\n    }\r\n  }\r\n}\r\n\r\nexport const OpAdd: React.FC = () => <OperatorButton id=\"add\" operator=\"+\" />\r\nexport const OpSubtract: React.FC = () => <OperatorButton id=\"subtract\" operator=\"-\" />\r\nexport const OpMultiply: React.FC = () => <OperatorButton id=\"multiply\" operator=\"*\" />\r\nexport const OpDivide: React.FC = () => <OperatorButton id=\"divide\" operator=\"/\" />\r\n","import React from 'react'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  RootState,\r\n  appendTotal, setTotal,\r\n} from \"../Store/rootReducer\"\r\nimport { AppDispatch } from \"../Store/store\"\r\nimport { Status } from \"../Store/Slices/statusSlice\"\r\n\r\nexport const Decimal: React.FC = () => {\r\n  const dispatch: AppDispatch = useDispatch()\r\n  const { state: status } = useSelector(({ status }: RootState) => status)\r\n  const { value: total } = useSelector(({ total }: RootState) => total)\r\n\r\n  return (\r\n    <button id=\"decimal\" onClick={ handleClick }>\r\n      .\r\n    </button>\r\n  )\r\n\r\n  function handleClick (_: React.MouseEvent<HTMLButtonElement>): void {\r\n    switch (status) {\r\n      case Status.TotalInput:\r\n      case Status.OperatorInput:\r\n      case Status.FirstInput: // No previous input for that number, I assume the number is 0.xxx\r\n        dispatch(setTotal({\r\n          value: '0.'\r\n        }))\r\n        break\r\n      case Status.FollowUpInput: // The number becomes a float.\r\n      case Status.MaybeNegative:\r\n        if (!/\\./.test(total)) {\r\n          dispatch(appendTotal({\r\n            value: '.'\r\n          }))\r\n        }\r\n        break\r\n    }\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport { useDispatch } from 'react-redux'\r\nimport { clear, clearHistory, clearTemp, setState } from \"../Store/rootReducer\"\r\nimport { AppDispatch } from \"../Store/store\";\r\nimport { Status } from \"../Store/Slices/statusSlice\";\r\n\r\nexport const Clear: React.FC = () => {\r\n  const dispatch: AppDispatch = useDispatch()\r\n\r\n  return (\r\n    <button id=\"clear\" onClick={ handleClick }>\r\n      AC\r\n    </button>\r\n  )\r\n\r\n  function handleClick () {\r\n    dispatch(clear())\r\n    dispatch(clearHistory())\r\n    dispatch(clearTemp())\r\n    dispatch(setState({ state: Status.FirstInput }))\r\n  }\r\n}\r\n\r\n/**\r\n * {type: 'total/setTotal', payload: { value: 1954 }}\r\n */","import React from 'react'\r\nimport './display.css'\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../Store/rootReducer\";\r\n\r\nexport const Display: React.FC = () => {\r\n  const { value: total } = useSelector(({ total }: RootState) => total)\r\n  const history = useSelector(({ history }: RootState) => history)\r\n  const { tempValue: tempTotal, tempSign } = useSelector(({ temp }: RootState) => temp)\r\n\r\n  return (\r\n    <section id=\"display_history\">\r\n      <section id=\"history\">\r\n        <ul>\r\n          {\r\n            history.map(({ prevValue, operator }, index) => (\r\n              <React.Fragment key={ index }>\r\n                <li>{ prevValue }</li><li>{ operator }</li>\r\n              </React.Fragment>\r\n            ))\r\n          }\r\n        </ul>\r\n      </section>\r\n      <p id=\"tempTotal\">{ `${ tempSign ? '-' : '' }${ tempTotal }` }</p>\r\n      <section id=\"display\">\r\n        <p>{ total }</p>\r\n      </section>\r\n    </section >\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { rootReducer } from \"./rootReducer\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nexport const store = configureStore({ reducer: rootReducer })\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css'\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./Store/store\";\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </React.StrictMode>\n  , document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React from 'react';\nimport './reset.css'\nimport './App.css';\nimport './Buttons/buttons.css'\n\nimport { Equals } from \"./Buttons/Equals\";\nimport { Digits } from \"./Buttons/Digits\";\nimport { OpAdd, OpDivide, OpMultiply, OpSubtract } from \"./Buttons/Ops\";\nimport { Decimal } from \"./Buttons/Decimal\";\nimport { Clear } from \"./Buttons/Clear\";\nimport { Display } from \"./Display/Display\";\n\nexport const App: React.FC = () => {\n  return (\n    <main className=\"App\">\n      <Display />\n      <section id=\"pad\">\n        <Digits />\n        <Decimal />\n        <OpAdd />\n        <OpSubtract />\n        <OpMultiply />\n        <OpDivide />\n        <Clear />\n        <Equals />\n      </section>\n    </main>\n  );\n}\n"],"sourceRoot":""}